{"version":3,"sources":["components/questionnaire-item/QuestionnaireItemComponent.tsx","components/questionnaire/QuestionnaireComponent.tsx","App.tsx","utils/returnResponse.tsx","serviceWorker.js","index.js"],"names":["QuestionnaireItemComponent","questionnaireResponse","props","className","QuestionnaireItem","prefix","linkId","text","type","name","onChange","valueBoolean","answerValueSet","event","valueString","target","value","populateChoice","valueQuantity","parseFloat","item","map","key","selectedQuestionnaireItemsByLinkId","Map","QuestionnaireComponent","selectedQuestionnaire","forEach","set","fillSelectedQuestionnaireItems","questionnaire","title","enableWhen","propsOnChange","allLinkedQuestionsAnswered","question","answer","linkedItem","get","answerBoolean","answerString","find","i","length","undefined","handleEnableWhen","App","options","ContentMyPain","state","SelectedQuestionnaire","QuestionnaireResponse","resourceType","status","id","handleChange","bind","submitAnswers","selected","this","setState","newQuestionnaireResponse","existingResponseIndex","findIndex","responseItem","push","FHIR","client","create","window","location","reload","option","onClick","selectQuestionnaire","JSON","stringify","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5cb9f42a.chunk.js","sourcesContent":["import React from 'react';\nimport { QuestionnaireItem, QuestionnaireResponseItemAnswer } from '../../fhir-types/fhir-r4';\nimport './QuestionnaireItemComponent.css';\n\nfunction QuestionnaireItemComponent(props: { QuestionnaireItem: QuestionnaireItem, onChange: (item: QuestionnaireItem, answer?: QuestionnaireResponseItemAnswer[]) => void }) {\n  return (\n    <div className=\"questionnaire-item\">\n        <div>{ props.QuestionnaireItem.prefix }</div>\n          <div>{ props.QuestionnaireItem.linkId }. { props.QuestionnaireItem.text }</div>\n      <div>\n        {\n          props.QuestionnaireItem.type === \"boolean\" ?\n            <div>\n              <input type=\"radio\" name={props.QuestionnaireItem.linkId} onChange={() => props.onChange(props.QuestionnaireItem, [{ valueBoolean: true }])} /> Yes\n              <input type=\"radio\" name={props.QuestionnaireItem.linkId} onChange={() => props.onChange(props.QuestionnaireItem, [{ valueBoolean: false }])} /> No\n            </div>\n          : props.QuestionnaireItem.type === \"choice\" ?\n            <div>\n                {populateChoice(props)}\n            </div>\n          : props.QuestionnaireItem.type === \"quantity\" ?\n            <div>\n              <input type=\"text\" onChange={(event) => props.onChange(props.QuestionnaireItem, [{ valueQuantity: { value: parseFloat(event.target.value) }}])}  /> days\n            </div>\n          : props.QuestionnaireItem.type === \"text\" ?\n              <div>\n                  <input type=\"text\" onChange={(event) => props.onChange(props.QuestionnaireItem, [{ valueString:event.target.value}])}  />\n              </div>\n          : <div>Unrecognized QuestionnaireItem type: { props.QuestionnaireItem.type }</div>\n        }\n      </div>\n      {/* <div>{ JSON.stringify(props.QuestionnaireItem) }</div> */}\n      <div>\n        {\n          props.QuestionnaireItem.item ? props.QuestionnaireItem.item.map((item, key) => \n            <QuestionnaireItemComponent QuestionnaireItem={item} key={key} onChange={props.onChange} />\n          ) : null\n        }\n      </div>\n    </div>\n  );\n}\n\nfunction populateChoice(props: { QuestionnaireItem: QuestionnaireItem, onChange: (item: QuestionnaireItem, answer?: QuestionnaireResponseItemAnswer[]) => void }){\n    if(props.QuestionnaireItem.answerValueSet === 'http://rti.com/fhir/rti/ValueSet/pain-assessments-intensity'){\n        return(\n            <select onChange={(event) => props.onChange(props.QuestionnaireItem, [{ valueString: event.target.value }])}>\n                <option> </option>\n                <option>no pain</option>\n                <option>mild pain</option>\n                <option>moderate pain</option>\n                <option>severe pain</option>\n                <option>very severe pain</option>\n            </select>\n        );\n    }\n    if(props.QuestionnaireItem.answerValueSet === 'http://rti.com/fhir/rti/ValueSet/pain-assessments-interference'){\n        return(\n            <select onChange={(event) => props.onChange(props.QuestionnaireItem, [{ valueString: event.target.value }])}>\n                <option> </option>\n                <option>Not at all</option>\n                <option>A little bit</option>\n                <option>Somewhat</option>\n                <option>Quite a bit</option>\n                <option>Very much</option>\n            </select>\n        );\n    }\n}\n\nexport default QuestionnaireItemComponent;","import React from 'react';\nimport './QuestionnaireComponent.css';\nimport {\n    Questionnaire,\n    QuestionnaireItem,\n    QuestionnaireResponse,\n    QuestionnaireResponseItemAnswer\n} from '../../fhir-types/fhir-r4';\nimport QuestionnaireItemComponent from '../questionnaire-item/QuestionnaireItemComponent';\n\nlet questionnaireResponse:QuestionnaireResponse;\nlet selectedQuestionnaireItemsByLinkId = new Map();\n\nfunction QuestionnaireComponent(props: { questionnaire: Questionnaire, questionnaireResponse: QuestionnaireResponse, onChange: (item: QuestionnaireItem, answer?: QuestionnaireResponseItemAnswer[]) => void }) {\n    fillSelectedQuestionnaireItems(props.questionnaire);\n    questionnaireResponse = props.questionnaireResponse;\n  return (\n    <div className=\"questionnaire\">\n      <div>{ props.questionnaire.title }</div>\n        {\n            props.questionnaire.item ? props.questionnaire.item.map((item, key) =>{\n                return item.enableWhen ? handleEnableWhen(item, key, props.onChange) : <QuestionnaireItemComponent QuestionnaireItem={item} key={key} onChange={props.onChange} />\n            }) : null\n       }\n    </div>\n  );\n}\n\n//for speed this might need to be done in App.selectQuestionnaire() so it is done once per questionnaire, instead of every time a change occurs\nfunction fillSelectedQuestionnaireItems(selectedQuestionnaire:Questionnaire){\n    selectedQuestionnaire.item?.forEach((item, key) => {selectedQuestionnaireItemsByLinkId.set(item.linkId,item);})\n}\n\nfunction handleEnableWhen(item: QuestionnaireItem, key: number, propsOnChange:(item: QuestionnaireItem, answer?: QuestionnaireResponseItemAnswer[])=>void){\n    let allLinkedQuestionsAnswered:boolean = false;\n    item.enableWhen?.map((enableWhen, key)=>{\n        const question:string = enableWhen.question;\n         questionnaireResponse.item?.map((answer, key)=>{\n             if(answer.linkId === question){\n                 let linkedItem = selectedQuestionnaireItemsByLinkId.get(answer.linkId);\n                 if(linkedItem.type === 'boolean'){\n                     if(answer.answer){\n                         if(answer.answer[0].valueBoolean === enableWhen.answerBoolean){\n                             allLinkedQuestionsAnswered = true;\n                         }else{\n                             allLinkedQuestionsAnswered = false;\n                         }\n                     }\n                 }\n                 if(linkedItem.type === 'choice'){\n                     if(answer.answer){\n                         if(answer.answer[0].valueString === enableWhen.answerString){\n                             allLinkedQuestionsAnswered = true;\n                         }else{\n                             allLinkedQuestionsAnswered = false;\n                         }\n                     }\n                 }\n                 /**\n                  * {\n        \"linkId\": \"6\",\n        \"type\": \"boolean\",\n        \"text\": \"item 6\",\n        \"enableWhen\": [\n          {\n            \"question\": \"3\",\n            \"answerQuantity\": 13\n          }\n        ]\n      }\nDoes NOT work.  It causes the error:\n                  Types of property 'enableWhen' are incompatible.\n                  Type '{ question: string; answerQuantity: number; }[]' is not assignable to type 'QuestionnaireItemEnableWhen[]'.\n                  Type '{ question: string; answerQuantity: number; }' is not assignable to type 'QuestionnaireItemEnableWhen'.\n                  Types of property 'answerQuantity' are incompatible.\n                  Type 'number' is not assignable to type 'Quantity | undefined'.  TS2322\n                   */\n\n/*\n                 if(linkedItem.type === 'quantity'){\n                     if(answer.answer){\n                         if(answer.answer[0].valueQuantity === enableWhen.answerQuantity){\n                             allLinkedQuestionsAnswered = true;\n                         }else{\n                             allLinkedQuestionsAnswered = false;\n                         }\n                     }\n                 }\n*/\n             }\n         })\n    })\n    if(allLinkedQuestionsAnswered) {\n        return <QuestionnaireItemComponent QuestionnaireItem={item} key={key} onChange={propsOnChange}/>\n    }else {\n        if (questionnaireResponse.item?.find(i => i.linkId === item.linkId)?.answer?.length) {\n            propsOnChange(item, undefined);\n        }\n    }\n}\n\nexport default QuestionnaireComponent;","import React from 'react';\nimport './App.css';\nimport QuestionnaireComponent from './components/questionnaire/QuestionnaireComponent';\nimport { Questionnaire, QuestionnaireResponse, QuestionnaireItem, QuestionnaireResponseItemAnswer } from './fhir-types/fhir-r4';\nimport ContentMyPain from './content/mypain-opioid.json';\nimport returnResponse from \"./utils/returnResponse\";\n\ninterface AppProps {\n\n}\n\ninterface AppState {\n  SelectedQuestionnaire: Questionnaire,\n  QuestionnaireResponse: QuestionnaireResponse\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  \n  private options: { \"value\": Questionnaire, \"text\": string }[] = [\n      { \"value\": ContentMyPain, \"text\": ContentMyPain.title }\n  ];\n\n  constructor(props: AppProps) {\n      super(props);\n      this.state =\n        {   \n          SelectedQuestionnaire: this.options[0].value,\n          QuestionnaireResponse: {\n            resourceType: \"QuestionnaireResponse\",\n            status: \"in-progress\",\n//            questionnaire: { id: this.options[0].value.id },\n            questionnaire: this.options[0].value.id ,\n            item: []\n          }\n        };\n\n      this.handleChange = this.handleChange.bind(this);\n      this.submitAnswers = this.submitAnswers.bind(this);\n  }\n\n  selectQuestionnaire(selected: Questionnaire): void {\n    this.setState({ \n      SelectedQuestionnaire: selected,\n      QuestionnaireResponse: {\n        resourceType: \"QuestionnaireResponse\",\n        status: \"in-progress\",\n//        questionnaire: { id: selected.id },\n        questionnaire: selected.id,\n        item: []\n      }\n    });\n\n  }\n\n  handleChange(item: QuestionnaireItem, answer?: QuestionnaireResponseItemAnswer[]): void {\n     //alert(JSON.stringify(item));\n    // alert(answer);\n    var newQuestionnaireResponse = this.state.QuestionnaireResponse;\n    if (!newQuestionnaireResponse.item)\n    {\n      newQuestionnaireResponse.item = [];\n    }\n    var existingResponseIndex = newQuestionnaireResponse.item.findIndex((responseItem) => responseItem.linkId === item.linkId);\n    if (existingResponseIndex >= 0) {\n      newQuestionnaireResponse.item[existingResponseIndex].answer = answer;\n        newQuestionnaireResponse.item[existingResponseIndex].text = item.text;\n    }\n    else {\n      newQuestionnaireResponse.item.push({\n        linkId: item.linkId,\n        answer: answer,\n        text:item.text\n\n      });\n    }\n\n    this.setState({\n      QuestionnaireResponse: newQuestionnaireResponse\n    });\n  }\n\n  submitAnswers(){\n      returnResponse(this.state.QuestionnaireResponse);\n      window.location.reload();\n  }\n\n  public render(): JSX.Element {\n  return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <p>\n            MyPain Development Branch v2\n          </p>\n        </header>\n        <div className=\"options\">\n          {\n            this.options.map((option, key) => \n              <div key={key}>\n                <button onClick={() => this.selectQuestionnaire(option.value)}>{option.text}</button>\n              </div>\n            )\n          }\n        </div>\n          <div className=\"options\">\n              <button className=\"submit-button\" onClick={() => this.submitAnswers()}>Submit</button>\n          </div>\n        <hr/>\n        <div>\n            <QuestionnaireComponent questionnaire={this.state.SelectedQuestionnaire} questionnaireResponse={this.state.QuestionnaireResponse} onChange={this.handleChange} />\n        </div>\n        <hr/>\n        <div>QuestionnaireResponse: { JSON.stringify(this.state.QuestionnaireResponse) }</div>\n      </div>\n    );\n  }\n}\n","import FHIR from 'fhirclient';\nimport {QuestionnaireResponse} from '../fhir-types/fhir-r4';\n\n\n    export default function returnResponse(questionnaireResponse: QuestionnaireResponse){\n            const client = FHIR.client('http://localhost:8080/cqf-ruler-r4/fhir')\n            // @ts-ignore\n            return client.create(questionnaireResponse)\n    }\n    /*\nWelcome to MyPAIN\n\n[Brief statement about MyPAIN]\n\nYou, [FirstName LastName] ([DOB:MM/DD/YYYY]), are scheduled for a visit with [Clinician Name] on\n[MM/DD/YYYY] at [XX:XX AM/PM].\n\nWe see that you will be coming in for a visit that may be related to pain management for\nand want to learn more about pain you may be experiencing related to this visit.\n{\n  \"Patient\":{\n    \"firstName\":\"\",\n    \"lastName\":\"\",\n    \"DOB\":\"\",\n    \"clinician\":\"\",\n    \"apptDate\":\"\",\n    \"apptTime\":\"\"\n  }\n}\n\n\n     */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}